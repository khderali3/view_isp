

 
import { parseISO, format } from "date-fns";

import { useLocale } from "next-intl"; // Get the current locale from next-intl
import { ar, enUS } from "date-fns/locale"; // Import necessary locales

import Link from "next/link";

import { useState } from "react";

import { useCustomFetchMutation } from "@/app/(site)/_components/redux/features/siteApiSlice";
import { toast } from "react-toastify";
import { getErrorMessage } from "@/app/public_utils/utils";
import CustomModal from "@/app/(dashboard)/_components/jsx/myModal";
  

import { useSelector } from "react-redux";





export const  StepOrSubStepSingleNote = ({note={}, note_for="step",  handleReloadFlag=null }) => {

    const locale = useLocale(); // Get the current locale



    const currentLocale = locale === "ar" ? ar : enUS;



    const [customFetch] = useCustomFetchMutation();
    const [objToDelete, setObjToDelete ] = useState(null)
    const [isModalOpen, setIsModalOpen] = useState(false); // State to control modal visibility


    const [deleting, setDeleting] = useState(false)


    const { permissions, is_superuser, is_staff  } = useSelector(state => state.staff_auth);

    const hasPermissionToDeleteStepNote = () => {
        if (is_superuser || (permissions?.includes('usersAuthApp.projectflow_step_note_delete') && is_staff)) {
            return true
        }
          return false
    }







    const submit_url = note_for === "step" 
        ?  `${process.env.NEXT_PUBLIC_BACKEND_URL}/api/staff/projectflow/projectflow/step/${note?.project_step}/note/${note?.id}/`
        : `${process.env.NEXT_PUBLIC_BACKEND_URL}/api/staff/projectflow/projectflow/step/sub_step/${note?.sub_step}/note/${note?.id}/`  

        const handleDelete = async ( ) => {
            setDeleting(true)
             try {   
               const response = await customFetch({
                url: submit_url,
               
                method: "DELETE",
               });  
               if (response && response.data) {
                if(locale === 'ar'){
                    toast.success('تم حذف الملاحظة بنجاح')

                } else {
                    toast.success('the note has been deleted')

                }
                  if(handleReloadFlag){handleReloadFlag()}
               } else {
                 toast.error(getErrorMessage(response?.error?.data))
         
               }
             } catch (error) {
               toast.error(getErrorMessage(error.data || error.message) || "Something went wrong");
             } finally{
                  setDeleting(false)
               }
           };


    const formatDate = (dateString) => {
   
        if (dateString) {
            return format(parseISO(dateString), 'dd MMM yyyy - h:mm a', { locale: currentLocale });
        }
    };
 


    return(

            <div className="note mb-2 p-2 border rounded">
                <div className="note-header d-flex justify-content-between  small text-muted  ">


                    {note.note_type === "cloned_from_template" ? (locale === 'ar' ? " تم إنشاء الملاحظة بشكل آلي " : "Generated By System") : 
                    
                        <span className="m-0 fs-6 text-muted">{note?.step_note_user?.full_name ? note?.step_note_user?.full_name : note?.sub_step_note_user?.full_name}  
                        
                            {(note?.step_note_user?.is_staff || note?.sub_step_note_user?.is_staff) && (
                                <span className="badge bg-light text-dark ms-2">staff</span>
                            )}
                        
                        </span>
                    }





                    {/* <span>{note?.step_note_user?.full_name}</span> */}
                    <span>{formatDate(note?.created_date || '')}</span> 
                </div>

                {/* <p className="  small">{note?.note}</p> */}
                <div className="note small" dir="auto"  style={{ whiteSpace: 'pre-line' }}> 
                    {note?.note}


                </div>

                <div className="attachments  ">
                    <ul className="list-unstyled small">
                         {note?.files?.map((file) => 
                            <li key={`note_${file.created_data}_${file.id}`} className="d-flex align-items-center">
                                <i className="bi bi-file-earmark" style={{ marginRight: '5px' }}></i>
                                <a href={file?.file || ''} target="_blank" rel="noopener noreferrer" className="text-muted  text-break">
                                    {file.file_name}
                                </a>
                            </li>
                        )}
                    </ul>



                    {hasPermissionToDeleteStepNote() &&
                        <div className="text-end mt-2 ">
                            <Link href="#"
                            
                            onClick={(e) => {
                            e.preventDefault()
                            setIsModalOpen(true)
                            }}
                            className="text-danger mx-2" title="Delete"><i className="bi bi-trash-fill"></i></Link>
                        </div>                    
                    }




                </div>



                <CustomModal  
                id={`delete_projectflow_${note_for}_note_id`}
                handleSubmit={handleDelete}

                submitting={deleting}
                message={
                    locale === 'ar' ? 'هل فعلا تريد حذف هذه الملاحظة؟' :  " are you sure you want to delete this note ? "
                }
                showModal={true} 
                isModalOpen={isModalOpen}
                setIsModalOpen={setIsModalOpen}

                /> 




            </div>
    
 
    )
}

